#ifndef CAMERA_H
#define CAMERA_H
#include "post3D/Mat4.h"
#include "post3D/Vec3.h"
#include "post3D/Object3D.h"
#include <memory>
using namespace object3D;
namespace scene{
/** 
 *  Represents a virtual Camera
 *  This class stores the world and projection matrices as well as the gamma value.
 *  This camera class can act as a free camera or a lookup camera.
 *  The world matrix gets updated automatically with values from position, rotation and scale.
 *  @todo: enable overriding the automatic worldMatrix updating by setting a variable
 */
class Camera : public Object3D{
private:
  std::shared_ptr<Mat4> projectionMatrix;/**< The projection Matrix. Stores the projection matrix as a std::shared_ptr<math3D::Mat4>*/
  std::shared_ptr<Mat4> worldMatrix;/**< The world Matrix. Stores the world matrix as a std::shared_ptr<math3D::Mat4>*/
  std::shared_ptr<Vec3> target;/**< The position of the target. Stores the position of the target for lookup camera*/
  float gamma;/**< Gamma correction value. Stores a float for setting gamma correction*/
public:
  /**
   * Camera constructor.
   * The constructor creates a free camera,
   */
  Camera();
  /**
   * Camera copy constructor.
   */
  Camera(const Camera& cam);
  /**
   * Camera move constructor.
   */
  Camera(Camera&& cam);
  /**
   * Camera copy assignment.
   */
  Camera& operator=(const Camera& cam);
  /**
   * Camera move assignment.
   */
  Camera& operator=(Camera&& cam);
  /**
   * Camera destructor.
   * The matrices are stored on std::shared_ptr(), they only get destroyed if no other object owns the resource.
   * Generated by deafult
   */
  ~Camera()=default;
  /**
   * Gets the projection matrix.
   * If not set or modified, the camera uses a default perspective projection.
   */
  std::shared_ptr<Mat4> getProjectionMatrix()const;
  /**
   * Sets the projection matrix.
   */
  Camera& setProjectionMatrix(std::shared_ptr<Mat4> mat);
  /**
   * Gets the world matrix.
   * If not set or modified, the camera uses a default identity matrix.
   */
  std::shared_ptr<Mat4> getWorldMatrix()const;
  /**
   * Sets the world matrix.
   */
  Camera& setWorldMatrix(std::shared_ptr<Mat4> mat);
  /**
   * Updates the world matrix.
   * Used to update the world matrix automatically.
   */
  Camera& updateWorldMatrix();
  /**
   * Get matrices as an array of floats.
   * Both matrices are returned in an array of floats wraped in a std::shared_ptr.
   */
  std::shared_ptr<float> getMatricesArray()const;
  /**
   * Get the camera target.
   * @return Returns a std::shared_ptr<Vec3> with the target of the lookup camera.
   */
  std::shared_ptr<Vec3> getTarget()const;
  /**
   * Sets the camera target.
   * By setting a target, the camera starts behaving as a lookup camera.
   */
  Camera& setTarget(std::shared_ptr<Vec3> target);
  /**
   * Gets the gamma correction value.
   */
  float getGamma()const;
  /**
   * Sets the gamma correction value.
   */
  Camera& setGamma(float gamma);
  /**
   * Makes the camera look at the target.
   * Method used for looking to a particular target.
   */
  Mat4 lookAt() const;
};
}
#endif